" inspired/copied from zacharyrankin/dotfiles
"   https://github.com/zacharyrankin/dotfiles/blob/master/vimrc
" and http://vimcasts.org/

set nocompatible              " be iMproved, required for vundle
filetype off                  " required for vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'chr4/nginx.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'godlygeek/tabular'
Plugin 'jiangmiao/auto-pairs'
Plugin 'rizzatti/dash.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'plasticboy/vim-markdown' " requires godlygeek/tabular

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate

let mapleader = "\<Space>"

" Backup and swap files in a hidden tmp directory
set backupdir=~/.tmp
set directory=~/.tmp

syntax on  " turn on syntax highlighting

" set airline (statusline) theme
let g:airline_theme='deus'

" allow switching to other buffers without saving / closing existing buffer
set hidden

" command settings
set showcmd                     " show pending command at the bottom right
set history=1000                " remember last 1000 commands

set scrolloff=6                 " set min num of lines to show above/below cursor

" white space settings
set backspace=indent,eol,start  " sane backspace behavior
set expandtab                   " use tabs instead of spaces
set tabstop=2                   " use a tab width of 2
set shiftwidth=2                " use a tab width of 2 when auto indenting
set softtabstop=2               " delete a tab's worth of spaces when backspacing

" turn on line numbers in a 6 column gutter
set number
set relativenumber
set numberwidth=6
highlight LineNr ctermbg=233 ctermfg=253
highlight CursorLineNr ctermbg=green ctermfg=black

" set line length guide
set colorcolumn=+1,+2,+3,+4,+5
highlight ColorColumn ctermbg=235

" set spell check formatting (for when it is on)
highlight clear SpellBad
highlight SpellBad cterm=underline ctermfg=red

" disable the arrow keys
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
vnoremap <Left> :<C-u>echoe "Use h"<CR>
vnoremap <Right> :<C-u>echoe "Use l"<CR>
vnoremap <Up> :<C-u>echoe "Use k"<CR>
vnoremap <Down> :<C-u>echoe "Use j"<CR>
inoremap <Left> <C-o>:echoe "Use h"<CR>
inoremap <Right> <C-o>:echoe "Use l"<CR>
inoremap <Up> <C-o>:echoe "Use k"<CR>
inoremap <Down> <C-o>:echoe "Use j"<CR>

" switch between most recent buffer
nmap <leader>e <c-^>
" reload vimrc changes
nmap <leader>so :source $MYVIMRC <cr>
" insert new line after current line
nmap <leader>o o<esc>
" insert new line before current line
nmap <leader>O O<esc>
" re-indent code blocks within braces
nmap <leader>= =i}

" ctags
nnoremap <leader>. :CtrlPTag<cr>
set tags+=./.tags,.tags

augroup filetype_markdown
  autocmd!
  autocmd BufNewFile,BufRead *.md set filetype=markdown
  " softwrap at 80 characters
  autocmd FileType markdown set columns=80
  autocmd FileType markdown setlocal wrap linebreak nolist textwidth=0 wrapmargin=0
  " reset the softwrap width after vim (e.g. the window) is resized
  autocmd VimResized * if (&columns > 80 && &filetype == 'markdown') | set columns=80 | endif
  " turn on spell check
  autocmd FileType markdown setlocal spell
augroup END

augroup functionality_trim
  autocmd!
  autocmd BufWritePre * call TrimTrailingWhitespace()
augroup END

augroup filetype_zsh
  autocmd!
  autocmd BufNewFile,BufRead *.zsh-theme,*zshrc set filetype=zsh
  " softwrap at 80 characters
  autocmd FileType zsh setlocal commentstring=#\ %s
augroup END

augroup filetype_php
  autocmd!
  autocmd FileType php setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
augroup END

augroup filetype_golang
  autocmd!
  autocmd FileType go setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
augroup END

augroup filetype_gitcommit
  autocmd!
  autocmd Filetype gitcommit setlocal spell textwidth=72
augroup END

" Silver searcher for CtrlP from
" from https://robots.thoughtbot.com/faster-grepping-in-vim
" ---
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " use in CtrlP for listing files fast and respecting .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden --ignore-dir=".git" -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

" search settings
" ---
set incsearch                   " highlight match as term is typed
set hlsearch                    " highlight all matches
set ignorecase                  " case insensitive search
set smartcase                   " case sensitive mode if I put a capital letter
" clear highlight of search
nmap <leader>h :nohlsearch<cr>

" vim-surround setting
" ---
" swap surrounding quotes from single to double quotes and vice versa
nmap <leader>' cs"'
nmap <leader>" cs'"

" enable built-in macro to find matching brace, tag, etc. using %
runtime macros/matchit.vim

" Tabularize
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
" ---
" align arrows (=>) in PHP
nmap <Leader>aa :Tabularize /=><CR>
vmap <Leader>aa :Tabularize /=><CR>
" align values after keys in JSON ('key':     'val')
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

" tab completion
" ---
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

function! Preserve(command)
  " Preparation: save window state
  let l:saved_winview = winsaveview()
  " Run the command:
  execute a:command
  " Clean up: restore previous window position
  call winrestview(l:saved_winview)
endfunction

function! TrimTrailingWhitespace()
  call Preserve("%s/\\s\\+$//e")
endfunction

" vim-markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_autowrite = 1

" dash
nmap <silent> <leader>d <Plug>DashSearch
